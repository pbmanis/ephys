# -*- encoding: utf-8 -*-
"""
Test fixture for ephys spike methods
Provide synthesis of test data, and run each of the tests.
"""

import dataclasses
import pickle
import sys
from dataclasses import dataclass, field
from pathlib import Path

import matplotlib.pyplot as mpl

import ephys.ephys_analysis.rm_tau_analysis as RMT
import ephys.ephys_analysis.spike_analysis as SA
from ephys.mini_analyses.util import UserTester

# set up for plotting


testmode = False  # set false to hold graphs up until closed;
# true for 2 sec display

# for reference - the HHIV data comes in with this class structure
@dataclass
class HHIV:  # mimics "Clamps" in spike and 
    mode:str = 'ic'
    traces: object=None
    cmd_wave: object=None
    values: object=None
    commandLevels: object=None  # for rmtau
    time_base: object=None
    tstart: float=0.02  # in seconds
    tend: float = 0.07  # in seconds
    tdur: float = 0.2  # in seconds
    sample_interval: float = 1e-5  # in seconds


def printPars(pars):
    print(dir(pars))
    d = dataclasses.asdict(pars)
    for k in d.keys():
        print("k: ", k, " = ", d[k])

# these are the tests that will be run automagically

def test_spikes_Kalluri():
    SpikeTester(method="Kalluri", plot=True)  # default method

def test_spikes_argrelmax():
    SpikeTester(method="argrelmax")

def test_spikes_find_peaks():
    SpikeTester(method="find_peaks")

def test_spikes_threshold():
    SpikeTester(method="threshold")  # simplest method

# def test_rmtau():
#     RmTauTester(extra="python")


# def test_rmtau():
#     RmTauTester(extra="cython")

def get_testdata(
):
    """
    The test data is generated by hh_sim
    Here we just read it

    """
    testpath = Path(__file__).parent # this assumes we are running in the same directory as the test data file

    with open(Path(testpath, "HHData.pkl"), "rb") as fh:
        IV = pickle.load(fh)  # should be a dict now
    IV = HHIV(**IV)
    return IV

def run_spike_tester(method="Kalluri", plot:bool=False):
    testdata  = get_testdata()
    spike_analyzer = SA.SpikeAnalysis()
    spike_analyzer.setup(clamps = testdata, threshold=-0.020, verbose=True)
    spike_analyzer.set_detector(method, pars=None) # Kalluri is probably the best detector
    spike_analyzer.analyzeSpikes()
    testresult = spike_analyzer.analysis_summary
    spike_analyzer.analyzeSpikeShape(max_spikeshape=3, printSpikeInfo=False)
    spksh = spike_analyzer.spikeShapes
    tr_line = []
    if plot:
        for i, t in enumerate(testdata.traces):
            tr_line.append(mpl.plot(testdata.time_base, testdata.traces[i], linewidth=0.33))
            if i in spksh.keys():
                sh = spksh[i]
                for j in sh.keys():
                    l_color = tr_line[i][0].get_color()
                    mpl.plot(sh[j].peak_T, sh[j].peak_V, 'o', color="red", markersize=3)
                    mpl.plot(sh[j].trough_T, sh[j].trough_V, '^', color=l_color, markersize=3)
                    ap_t = testdata.time_base[sh[j].AP_beginIndex]
                    # mpl.plot(sh[j].left_halfwidth_T, sh[j].left_halfwidth_V, 'r_')
                    # mpl.plot(sh[j].right_halfwidth_T, sh[j].right_halfwidth_V, 'b_')
                    mpl.plot([sh[j].left_halfwidth_T, sh[j].right_halfwidth_T], 
                             [sh[j].left_halfwidth_V, sh[j].right_halfwidth_V,], color=l_color,
                              marker='o', markersize=1, linestyle='-', linewidth=1)
        
        mpl.show()
    return spksh

class SpikeTester(UserTester):
    def __init__(self, method="Kalluri", extra=None, plot:bool=False):
        self.TM = None
        self.figure = None
        UserTester.__init__(self,  "%s_%s" % (method, "spikeshape"), method)
        # UserTester.__init__(self, "%s_%s" % (method, extra), method)
        # if you want to store different results by the "extra" parameter

    def run_test(self, method, plot:bool=False):
        test_result = run_spike_tester(method=method, plot=plot)

        if "figure" in list(test_result.keys()):
            self.figure = test_result["figure"]
        return test_result

    def assert_test_info(self, *args, **kwds):
        try:
            super(SpikeTester, self).assert_test_info(*args, **kwds)
        finally:
            if self.figure is not None:
                del self.figure

if __name__ == "__main__":
    ntraces = 1
    methods = [
        "Kalluri",
        "argrelmax",
        "find_peaks",
        # "find_peaks_cwt",
        "threshold",
    ]
    testmethod = None
    print(len(sys.argv))
    if len(sys.argv) <= 1:
        testmethod = 'Kalluri'

    if len(sys.argv) > 1:
        testmethod = sys.argv[1]
    if testmethod in ["all", "ALL"]:
        for m in methods:
            analysis_summary = run_spike_tester(method=m)
        exit()
    if testmethod not in methods:
        print("Test for %s method is not implemented" % testmethod)
        exit(1)
    else:
        analysis_summary = run_spike_tester(method=testmethod)
    
        
    